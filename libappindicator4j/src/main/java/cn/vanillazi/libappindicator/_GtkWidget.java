// Generated by jextract

package cn.vanillazi.libappindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkWidget {
 *     GtkObject object;
 *     guint16 private_flags;
 *     guint8 state;
 *     guint8 saved_state;
 *     gchar* name;
 *     GtkStyle* style;
 *     GtkRequisition requisition;
 *     GtkAllocation allocation;
 *     GdkWindow* window;
 *     GtkWidget* parent;
 * };
 * }
 */
public class _GtkWidget {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_POINTER$LAYOUT.withName("g_class")
                ).withName("g_type_instance"),
                Constants$root.C_INT$LAYOUT.withName("ref_count"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("qdata")
            ).withName("parent_instance"),
            Constants$root.C_INT$LAYOUT.withName("flags"),
            MemoryLayout.paddingLayout(32)
        ).withName("object"),
        Constants$root.C_SHORT$LAYOUT.withName("private_flags"),
        Constants$root.C_CHAR$LAYOUT.withName("state"),
        Constants$root.C_CHAR$LAYOUT.withName("saved_state"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("style"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height")
        ).withName("requisition"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("x"),
            Constants$root.C_INT$LAYOUT.withName("y"),
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height")
        ).withName("allocation"),
        Constants$root.C_POINTER$LAYOUT.withName("window"),
        Constants$root.C_POINTER$LAYOUT.withName("parent")
    ).withName("_GtkWidget");
    public static MemoryLayout $LAYOUT() {
        return _GtkWidget.$struct$LAYOUT;
    }
    public static MemorySegment object$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    static final VarHandle private_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("private_flags"));
    public static VarHandle private_flags$VH() {
        return _GtkWidget.private_flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint16 private_flags;
     * }
     */
    public static short private_flags$get(MemorySegment seg) {
        return (short)_GtkWidget.private_flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint16 private_flags;
     * }
     */
    public static void private_flags$set(MemorySegment seg, short x) {
        _GtkWidget.private_flags$VH.set(seg, x);
    }
    public static short private_flags$get(MemorySegment seg, long index) {
        return (short)_GtkWidget.private_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void private_flags$set(MemorySegment seg, long index, short x) {
        _GtkWidget.private_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle state$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("state"));
    public static VarHandle state$VH() {
        return _GtkWidget.state$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint8 state;
     * }
     */
    public static byte state$get(MemorySegment seg) {
        return (byte)_GtkWidget.state$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint8 state;
     * }
     */
    public static void state$set(MemorySegment seg, byte x) {
        _GtkWidget.state$VH.set(seg, x);
    }
    public static byte state$get(MemorySegment seg, long index) {
        return (byte)_GtkWidget.state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void state$set(MemorySegment seg, long index, byte x) {
        _GtkWidget.state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle saved_state$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("saved_state"));
    public static VarHandle saved_state$VH() {
        return _GtkWidget.saved_state$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint8 saved_state;
     * }
     */
    public static byte saved_state$get(MemorySegment seg) {
        return (byte)_GtkWidget.saved_state$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint8 saved_state;
     * }
     */
    public static void saved_state$set(MemorySegment seg, byte x) {
        _GtkWidget.saved_state$VH.set(seg, x);
    }
    public static byte saved_state$get(MemorySegment seg, long index) {
        return (byte)_GtkWidget.saved_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void saved_state$set(MemorySegment seg, long index, byte x) {
        _GtkWidget.saved_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return _GtkWidget.name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidget.name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        _GtkWidget.name$VH.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidget.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidget.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle style$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("style"));
    public static VarHandle style$VH() {
        return _GtkWidget.style$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkStyle* style;
     * }
     */
    public static MemorySegment style$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidget.style$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkStyle* style;
     * }
     */
    public static void style$set(MemorySegment seg, MemorySegment x) {
        _GtkWidget.style$VH.set(seg, x);
    }
    public static MemorySegment style$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidget.style$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void style$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidget.style$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment requisition$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static MemorySegment allocation$slice(MemorySegment seg) {
        return seg.asSlice(64, 16);
    }
    static final VarHandle window$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("window"));
    public static VarHandle window$VH() {
        return _GtkWidget.window$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GdkWindow* window;
     * }
     */
    public static MemorySegment window$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidget.window$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GdkWindow* window;
     * }
     */
    public static void window$set(MemorySegment seg, MemorySegment x) {
        _GtkWidget.window$VH.set(seg, x);
    }
    public static MemorySegment window$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidget.window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void window$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidget.window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("parent"));
    public static VarHandle parent$VH() {
        return _GtkWidget.parent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkWidget* parent;
     * }
     */
    public static MemorySegment parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidget.parent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkWidget* parent;
     * }
     */
    public static void parent$set(MemorySegment seg, MemorySegment x) {
        _GtkWidget.parent$VH.set(seg, x);
    }
    public static MemorySegment parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidget.parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parent$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidget.parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


